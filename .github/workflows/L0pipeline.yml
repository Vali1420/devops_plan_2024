name: L0pipeline_Terraform

on:
  workflow_dispatch:

permissions:
    id-token: write
    contents: read

env:
  CONFIG: ${{ secrets.AZURE_VALITESTING_KUBE_CONFIG }}

jobs:
  deploy-azure-services:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0
      
      - name: Install dependencies
        uses: yokawasa/action-setup-kube-tools@v0.9.2
        with:
          kubectl: '1.17.1'
          helm: '3.13.2'
          kubeconform: '0.5.0'

      - name: Log into Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Initialize Terraform
        working-directory: ./L0_Terraform
        run:
          terraform init
      
      - name: Apply Terraform Changes
        working-directory: ./L0_Terraform
        run:
          terraform apply
           -var subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}
           -var azure_key_vault_tenant_id=${{ secrets.AZURE_KEY_VAULT_TENANTID }}
           -var mysql_admin="admin1234"
           -var mysql_password=${{ secrets.DATABASE_PASSWORD }}
           -var postgres_admin="admin1234"
           -var postgres_password=${{ secrets.DATABASE_PASSWORD }}
           -auto-approve 
           -lock=false
      
      - name: Terraform save cluster_key_vault_client_id as Secret
        run: export CLUSTER_KEY_VAULT_CLIENT_ID=$(terraform output cluster_key_vault_client_id) && 
              echo "::add-mask::$CLUSTER_KEY_VAULT_CLIENT_ID" &&
              echo CLUSTER_KEY_VAULT_CLIENT_ID=$CLUSTER_KEY_VAULT_CLIENT_ID >> $GITHUB_ENV

      - name: Set config file
        run: |
           echo "$CONFIG" > ${HOME}/config
           mkdir -p home/runner/.kube
           echo "$CONFIG" > home/runner/.kube/config

      - name: Configure AKS Secret Provider
        working-directory: ./Kubernetes/AzureKeyVaultIntegration
        run:
          helm upgrade --install helm-secrets-provider-aks .
          --kubeconfig "${HOME}/config"
          --values values.yaml
          --set-string tenantId=${{ secrets.AZURE_KEY_VAULT_TENANTID }}
          --set-string clientId=$CLUSTER_KEY_VAULT_CLIENT_ID

      # - name: Integrate ACR to AKS
      #   run: |
      #     az aks update -n akscarwebapplication12 -g AVL-Vali-Testing --attach-acr carwebappcontainerregistry
      
      # - name: Azure Cluster Configuration
      #   run: |
      #     az aks get-credentials --name akscarwebapplication12 --resource-group AVL-Vali-Testing
      #     az aks enable-addons --addons azure-keyvault-secrets-provider --name akscarwebapplication12 --resource-group AVL-Vali-Testing
      